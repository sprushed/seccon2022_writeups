import subprocess
from pwn import *
from base64 import b64decode

context.log_level = 'CRITICAL'

HOST = 'noiseccon.seccon.games'
PORT = 1337


def read_constants() -> tuple[int, int, int]:
    r = remote(HOST, PORT)
    data = r.recvuntil(b'Scale x: ').decode()
    r.close()

    length = int(re.findall(r'Flag length: ([0-9]+)', data)[0])
    w = int(re.findall(r'Image width: ([0-9]+)', data)[0])
    h = int(re.findall(r'Image height: ([0-9]+)', data)[0])
    return length, w, h


FLAG_LENGTH, WIDTH, HEIGHT = read_constants()
log.info(f'Working with FLAG_LENGTH={FLAG_LENGTH}')


def remote_get_nums(scale_x: int, scale_y: int):
    r = remote(HOST, PORT)
    r.recvuntil(b'Scale x: ').decode()
    r.sendline(str(scale_x).encode())
    r.recvuntil(b'Scale y: ')
    r.sendline(str(scale_y).encode())

    img = r.recvall()
    with open('image.webp', 'wb') as f:
        f.write(b64decode(img))


def local_brute_next_byte() -> bytes:
    output = subprocess.check_output(['node', 'brute.js'])
    return bytes([int(output.strip().decode())])


flag = b''
for i in range(8 * 8, (8 + FLAG_LENGTH) * 8, 8):
    while True:
        try:
            scale = 1 << i
            remote_get_nums(1 << i, 1 << i)
            flag = local_brute_next_byte() + flag
            print(f'[+] New symbol!!! {flag}')
            break
        except Exception:
            print('[!] Exception was raised, retrying...')
